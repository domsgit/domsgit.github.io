{"meta":{"title":"domsgit的个人主页","subtitle":"stay hungry stay foolish","description":"前端、后端、docker、k8s","author":"domsgit","url":"https://domsgit.github.io","root":"/"},"pages":[{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/README.html","permalink":"https://domsgit.github.io/CVS/README.html","excerpt":"","text":"canvas playground"},{"title":"About","date":"2019-08-18T03:16:09.000Z","updated":"2019-08-18T03:16:09.000Z","comments":true,"path":"about/index.html","permalink":"https://domsgit.github.io/about/index.html","excerpt":"","text":""},{"title":"Project","date":"2019-08-17T15:29:51.000Z","updated":"2019-08-17T15:29:51.000Z","comments":true,"path":"project/index.html","permalink":"https://domsgit.github.io/project/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-08-17T15:29:51.000Z","updated":"2019-08-17T15:29:51.000Z","comments":true,"path":"tags/index.html","permalink":"https://domsgit.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/basic.html","permalink":"https://domsgit.github.io/CVS/examples/basic.html","excerpt":"","text":"基本骨架 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { const cvs = new CVS() // ... }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/bezierCurveTo.html","permalink":"https://domsgit.github.io/CVS/examples/bezierCurveTo.html","excerpt":"","text":"乱弧-quadraticCurveTo html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var NUM = 10 for(var i = 0; i < NUM; i++) { ctx.lineWidth = 10 * Math.random() ctx.strokeStyle = cvs.randomHexColor() // ctx.fillStyle = cvs.randomHexColor() ctx.beginPath() ctx.moveTo(Math.random() * width, Math.random() * height) ctx.bezierCurveTo(Math.random() * width, Math.random() * height, Math.random() * width, Math.random() * height, Math.random() * width, Math.random() * height) ctx.stroke() // ctx.fill() } }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/collideExperiment.html","permalink":"https://domsgit.github.io/CVS/examples/collideExperiment.html","excerpt":"","text":"碰撞实验 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } #msg { position: absolute; top: 1rem; right: 1rem; font-size: 2rem; color: white; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var oMsg = document.getElementById('msg') var log = console.log var circle1 = { x: 50, y: 50, r: 50 } var circle2 = { x: 300, y: 300, r: 100 } ctx.globalAlpha = 0.8 ctx.globalCompositeOperation = 'xor' render() function render() { ctx.fillStyle = 'red' ctx.beginPath() ctx.arc(circle1.x, circle1.y, circle1.r, 0, 2 * Math.PI) ctx.fill() ctx.fillStyle = 'green' ctx.beginPath() ctx.arc(circle2.x, circle2.y, circle2.r, 0, 2 * Math.PI) ctx.fill() var shtml = \"\" + \"x: \" + circle1.x + \", y: \" + circle1.y + \", r: \" + circle1.r + \"\" var position = '' if(cvs.isCirclesInDisjoint(circle1, circle2)) { position = ' 相离' } if(cvs.isCirclesInSomeCentreDot(circle1, circle2)) { position += ' 同心圆' } if(cvs.isCirclesInOuterTangency(circle1, circle2)) { position += ' 外切' } if(cvs.isCirclesInInnerTangency(circle1, circle2)) { position += ' 内切' } if(cvs.isCirclesInContain(circle1, circle2)) { position += ' 包含' } if(cvs.isCirclesInIntersect(circle1, circle2)) { position += ' 相交' } shtml += \"\" + position + \"\" oMsg.innerHTML = shtml } window.addEventListener('mousemove', function(e) { circle1.x = e.x circle1.y = e.y ctx.clearRect(0, 0, width, height) render() }) }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/compositeOperation.html","permalink":"https://domsgit.github.io/CVS/examples/compositeOperation.html","excerpt":"","text":"合成 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } #msg { position: absolute; top: 1rem; right: 1rem; font-size: 2rem; color: white; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var compositeOperations = [ 'source-over', 'source-atop', 'source-in', 'source-out', 'destination-over', 'destination-atop', 'destination-in', 'destination-out', 'lighter', 'copy', 'xor' ] var len = compositeOperations.length var NUM = 50 var globalCompositeOperation = '' var index = 0 var timer = setInterval(function() { if(index === len) { index = 0 } globalCompositeOperation = compositeOperations[index] var oMsg = document.getElementById('msg') oMsg.innerText = globalCompositeOperation render() index++ }, 1000) function render() { ctx.clearRect(0, 0, width, height) ctx.globalAlpha = 1 ctx.globalCompositeOperation = globalCompositeOperation ctx.lineWidth = 10 ctx.strokeStyle = 'red' ctx.fillStyle = 'green' ctx.beginPath() ctx.arc((width - 200) / 2, (height - 200) / 2, 200, 0, 2 * Math.PI) ctx.stroke() ctx.fill() ctx.strokeStyle = 'blue' ctx.fillStyle = 'orange' ctx.beginPath() ctx.arc((width + 200) / 2, (height + 200) / 2, 200, 0, 2 * Math.PI) ctx.stroke() ctx.fill() } }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/elasticCollideCircles.html","permalink":"https://domsgit.github.io/CVS/examples/elasticCollideCircles.html","excerpt":"","text":"小球的弹性碰撞 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var circles = [] var min = Math.min(width, height) var circlesNum = 0 var rest = [min / 2] while(rest[0] > 40) { rest.unshift(rest[0] / 2) circlesNum++ } rest.pop() render() function render() { requestAnimationFrame(render) ctx.clearRect(0, 0, width, height) ctx.globalAlpha = 0.8 for(var i = 0; i < circlesNum; i++) { var prev = circles[i - 1] || {} var circle = circles[i] || { x: (prev.x || 0) + rest[i], y: (prev.y || 0) + rest[i], r: rest[i] / 2, dx: 6 * Math.random() * Math.pow(-1, Math.random() > 0.5 ? 2 : 1), dy: 6 * Math.random() * Math.pow(-1, Math.random() > 0.5 ? 2 : 1), color: cvs.randomHexColor(), } for(var j = 0, len = circles.length; j < len; j++) { if(i !== j && circles[i] && circles[j] && cvs.isCirclesInIntersect(circles[i], circles[j])) { // 假设小球的质量m即为r // 动量守恒定律 + 能量守恒定律 => 小球碰撞后的速度： // var denominator = circles[i].r + circles[j].r // circles[i].dx = ((circles[i].r - circles[j].r) * circles[i].dx + 2 * circles[j].r * circles[j].dx) / denominator // circles[j].dx = ((circles[j].r - circles[i].r) * circles[j].dx + 2 * circles[i].r * circles[i].dx) / denominator // circles[i].dy = ((circles[i].r - circles[j].r) * circles[i].dy + 2 * circles[j].r * circles[j].dy) / denominator // circles[j].dy = ((circles[j].r - circles[i].r) * circles[j].dy + 2 * circles[i].r * circles[i].dy) / denominator circles[i].dx *= -1 circles[i].dy *= -1 } } if(circle.x > width - circle.r || circle.x < circle.r) { circle.dx *= -1 } if(circle.y > height - circle.r || circle.y < circle.r) { circle.dy *= -1 } circle.x += circle.dx circle.y += circle.dy ctx.fillStyle = circle.color ctx.beginPath() ctx.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI) ctx.fill() ctx.closePath() if(circles.length < circlesNum) { circles.push(circle) } else { circles[i] = circle } } } }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/flyDots.html","permalink":"https://domsgit.github.io/CVS/examples/flyDots.html","excerpt":"","text":"飞点 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 new CVS({ onRender: function(i, caches) { const {ctx, options, width, height} = this // const {caches: {flyDots: caches}} = options let vdot = caches && caches[i] if(!vdot) { const size = Math.floor(Math.random() * 40) vdot = new this.VDot( new this.Dot( size + (width - 2 * size) * Math.random(), size + (height - 2 * size) * Math.random(), 6 * Math.random() * Math.pow(-1, Math.random() > 0.5 ? 2 : 1), 6 * Math.random() * Math.pow(-1, Math.random() > 0.5 ? 2 : 1) ), Math.floor(Math.random() * 40), this.randomHexColor()) } vdot.render(this) return vdot }, times: 50, isAnimation: true, cacheName: 'flyDots' })"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/flyLine.html","permalink":"https://domsgit.github.io/CVS/examples/flyLine.html","excerpt":"","text":"飞刀 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 new CVS({ onContextConfig: function() { this.ctx.lineWidth = 6 this.ctx.lineCap = 'round' var options = this.options var width = options.width var height = options.height var sx = (width / 2) * Math.random() var sy = (height / 2) * Math.random() var ex = (width / 2) * Math.random() var ey = (height / 2) * Math.random() var mx = sx + ((ex - sx) >> 1) var my = sy + ((ey - sy) >> 1) var dx = 6 * Math.random() * Math.pow(-1, Math.random() > 0.5 ? 2 : 1) var dy = 6 * Math.random() * Math.pow(-1, Math.random() > 0.5 ? 2 : 1) var gx = ex - sx var gy = ey - sy var degree = Math.atan(gy / gx) var length = Math.sqrt(Math.pow(gx, 2) + Math.pow(gy, 2)) >> 1 return { sx, sy, ex, ey, mx, my, dx, dy, gx, gy, degree, length } }, onRender: function() { var ctx = this.ctx var options = this.options var width = options.width var height = options.height var initDatas = this.initDatas initDatas.mx += initDatas.dx initDatas.my += initDatas.dy initDatas.degree += 0.5 // 1 initDatas.degree = initDatas.degree > Math.PI * 2 ? Math.PI * 2 - initDatas.degree : initDatas.degree var nsx = initDatas.mx + initDatas.length * Math.cos(initDatas.degree) var nsy = initDatas.my + initDatas.length * Math.sin(initDatas.degree) var nex = initDatas.mx - initDatas.length * Math.cos(initDatas.degree) var ney = initDatas.my - initDatas.length * Math.sin(initDatas.degree) if(nsx > width || nsx < 0 || nex > width || nex < 0) { initDatas.dx *= -1 } if(nsy > width || nsy < 0 || ney > width || ney < 0) { initDatas.dy *= -1 } ctx.strokeStyle = this.randomHexColor() ctx.beginPath() ctx.moveTo(nsx, nsy) ctx.lineTo(nex, ney) ctx.stroke() }, isAnimation: true })"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/freeFallDot.html","permalink":"https://domsgit.github.io/CVS/examples/freeFallDot.html","excerpt":"","text":"自由落体 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 const maxDotSize = 60 new CVS({ onRender: function(i, caches) { const {ctx, options, width, height} = this let vdot = caches && caches[i] if(!vdot) { const size = Math.floor(Math.random() * maxDotSize) vdot = new this.VDot( new this.Dot( maxDotSize + maxDotSize * i, maxDotSize, 0, 0, 0, 9.8 ), Math.floor(Math.random() * 40), this.randomHexColor() ) } vdot.render(this) // TODO vdot.mutation = function(){ if(this.y > height - this.size) { this.vy *= -1 } if(this.y >= height - this.size && this.vy > 0) { this.y = height - this.size } else { this.vy = this.vy + this.ay this.y = this.y + this.vy + (this.ay >> 1) } } return vdot }, times: Math.floor(document.documentElement.clientWidth / maxDotSize), isAnimation: true, cacheName: 'freeFallDot' })"},{"title":"","date":"2019-09-03T16:09:45.000Z","updated":"2019-09-03T16:09:45.000Z","comments":true,"path":"CVS/examples/index.html","permalink":"https://domsgit.github.io/CVS/examples/index.html","excerpt":"","text":"例子 骨架 基本骨架： basic.html 生命周期： lifeCycle.html 点 乱点： mutilDots.html 闪点： sparkleDots.html 飞点： flyDots.html 自由落体： freeFallDot.html 线 乱线： messLines.html 飞刀： flyLine.html 平行线： parallelLines.html 流星雨： meteorRains.html 圆 乱圆： mutilCircles.html 合成： compositeOperation.html 碰撞实验： collideExperiment.html 小球的弹性碰撞： elasticCollideCircles.html 弧 乱弧： mutilArcs.html 乱弧-arcTo： mutilArctos.html 乱弧-quadraticCurveTo： quadraticCurveTo.html 乱弧-bezierCurveTo： bezierCurveTo.html"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/lifeCycle.html","permalink":"https://domsgit.github.io/CVS/examples/lifeCycle.html","excerpt":"","text":"生命周期 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 new CVS({ onInit: function(instance) { console.log('onInit') }, onContextCreate: function(instance) { console.log('onContextCreate') }, onBeforeReload: function(instance) { console.log('onBeforeReload') }, onAfterReload: function(instance) { console.log('onAfterReload') }, onContextConfig: function(instance) { console.log('onContextConfig') }, onRender: function(instance) { console.log('onRender') }, onAnimation: function(instance) { console.log('onAnimation') return true }, })"},{"title":"","date":"2019-09-03T16:09:45.000Z","updated":"2019-09-03T16:09:45.000Z","comments":true,"path":"CVS/examples/messLines.html","permalink":"https://domsgit.github.io/CVS/examples/messLines.html","excerpt":"","text":"乱线 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 new CVS({ onRender: function(index) { console.log(index) const {ctx, width, height} = this const segment = new this.Segment( new this.Dot( ~~(width * Math.random()), ~~(height * Math.random()) ), new this.Dot( ~~(width * Math.random()), ~~(height * Math.random()) ), ) segment.render(this) }, times: 50 })"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/meteorRains.html","permalink":"https://domsgit.github.io/CVS/examples/meteorRains.html","excerpt":"","text":"流星雨 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var angle = Math.random() * Math.PI // * 2 var NUM = 500 var dx = 8 * Math.cos(angle) var dy = 8 * Math.sin(angle) var meteorsQueue = [] var k = 2 * Math.sqrt(Math.pow(width / 2, 2) + Math.pow(height / 2, 2)) var vScreenStartX = (-dx / Math.abs(dx)) * k * Math.abs(Math.cos(angle)) var vScreenStartY = (-dy / Math.abs(dy)) * k * Math.abs(Math.sin(angle)) render() // 新增线 function createLine() { var lwidth = Math.floor(Math.random() * 6) var lcolor = cvs.randomHexColor() var sx = vScreenStartX + width * Math.random() var sy = vScreenStartY + height * Math.random() var length = Math.random() * 50 + 10 var ex = sx + length * Math.cos(angle) var ey = sy + length * Math.sin(angle) ctx.beginPath() ctx.lineWidth = lwidth ctx.strokeStyle = lcolor ctx.moveTo(sx, sy) ctx.lineTo(ex, ey) ctx.stroke() meteorsQueue.push([sx, sy, ex, ey, lwidth, lcolor]) } // 重渲染 function render() { requestAnimationFrame(render) removeAndAddLine() ctx.clearRect(0, 0, width, height) for(var i = 0; i < meteorsQueue.length; i++) { meteorsQueue[i][0] = meteorsQueue[i][0] + dx meteorsQueue[i][1] = meteorsQueue[i][1] + dy meteorsQueue[i][2] = meteorsQueue[i][2] + dx meteorsQueue[i][3] = meteorsQueue[i][3] + dy ctx.beginPath() ctx.lineWidth = meteorsQueue[i][4] ctx.strokeStyle = meteorsQueue[i][5] ctx.moveTo(meteorsQueue[i][0], meteorsQueue[i][1]) ctx.lineTo(meteorsQueue[i][2], meteorsQueue[i][3]) ctx.stroke() } } // 删除不在屏幕的线，并且新增线，以保持线的数量一直有且一致 function removeAndAddLine() { meteorsQueue = meteorsQueue.filter(v => isLineInScreen(v)) new Array(NUM - meteorsQueue.length).fill(1).map(v => createLine()) } // 判断 某线 是否还在屏幕中 或是在虚拟屏幕到显示屏幕的路径中 function isLineInScreen(line) { if(isPointInScreen([line[0], line[1]]) || isPointInScreen([line[2], line[3]])) return true return false } // 判断 某点 是否还在屏幕中 或是在虚拟屏幕到显示屏幕的路径中 function isPointInScreen(point) { var minX = Math.min(0, vScreenStartX, width, vScreenStartX + width) var maxX = Math.max(0, vScreenStartX, width, vScreenStartX + width) var minY = Math.min(0, vScreenStartY, height, vScreenStartY + height) var maxY = Math.max(0, vScreenStartY, height, vScreenStartY + height) if(point[0] >= minX && point[0] = minY && point[1]"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/mutilArcs.html","permalink":"https://domsgit.github.io/CVS/examples/mutilArcs.html","excerpt":"","text":"乱弧 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var NUM = 50 for(var i = 0; i < NUM; i++) { var r = Math.random() * 50 var d = 2 * r var x = r + Math.random() * (width - d) var y = r + Math.random() * (height - d) ctx.lineWidth = 10 * Math.random() ctx.strokeStyle = cvs.randomHexColor() ctx.fillStyle = cvs.randomHexColor() ctx.beginPath() ctx.arc(x, y, r, 2 * Math.PI * Math.random(), 2 * Math.PI * Math.random(), Math.random() > 0.5 ? true : false) ctx.stroke() ctx.fill() } }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/mutilArctos.html","permalink":"https://domsgit.github.io/CVS/examples/mutilArctos.html","excerpt":"","text":"乱弧-arcTo html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var NUM = 10 for(var i = 0; i < NUM; i++) { var r = Math.random() * 50 var d = 2 * r var x = r + Math.random() * (width - d) var y = r + Math.random() * (height - d) ctx.lineWidth = 10 * Math.random() ctx.strokeStyle = cvs.randomHexColor() ctx.fillStyle = cvs.randomHexColor() ctx.beginPath() ctx.moveTo(x, y) var x2 = Math.random() * width var y2 = Math.random() * height ctx.arcTo(Math.random() * width, Math.random() * height, x2, y2, r) // ctx.lineTo(x2, y2) ctx.stroke() ctx.fill() } }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/mutilCircles.html","permalink":"https://domsgit.github.io/CVS/examples/mutilCircles.html","excerpt":"","text":"乱圆 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var NUM = 50 for(var i = 0; i < NUM; i++) { var r = Math.random() * 50 var d = 2 * r var x = r + Math.random() * (width - d) var y = r + Math.random() * (height - d) ctx.lineWidth = 10 * Math.random() ctx.strokeStyle = cvs.randomHexColor() ctx.fillStyle = cvs.randomHexColor() ctx.beginPath() ctx.arc(x, y, r, 0, 2 * Math.PI) ctx.stroke() ctx.fill() } }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/mutilDots.html","permalink":"https://domsgit.github.io/CVS/examples/mutilDots.html","excerpt":"","text":"乱点 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 new CVS({ onRender: function(index) { console.log(index) const {ctx, width, height} = this const vdot = new this.VDot( new this.Dot( width * Math.random(), height * Math.random() ), Math.floor(Math.random() * 40), this.randomHexColor() ) vdot.render(this) }, times: 100 })"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/parallelLines.html","permalink":"https://domsgit.github.io/CVS/examples/parallelLines.html","excerpt":"","text":"平行线 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 new CVS({ onContextConfig: function() { return { angle: Math.random() * Math.PI } }, onRender: function(index) { console.log(index) const {ctx, width, height, initDatas: {angle}} = this const sx = width * Math.random() const sy = height * Math.random() const length = Math.random() * 50 + 10 const segment = new this.Segment( new this.Dot( sx, sy ), new this.Dot( sx + length * Math.cos(angle), sy + length * Math.sin(angle) ), ) segment.render(this) }, times: 100 })"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/quadraticCurveTo.html","permalink":"https://domsgit.github.io/CVS/examples/quadraticCurveTo.html","excerpt":"","text":"乱弧-quadraticCurveTo html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var NUM = 10 for(var i = 0; i < NUM; i++) { ctx.lineWidth = 10 * Math.random() ctx.strokeStyle = cvs.randomHexColor() // ctx.fillStyle = cvs.randomHexColor() ctx.beginPath() ctx.moveTo(Math.random() * width, Math.random() * height) ctx.quadraticCurveTo(Math.random() * width, Math.random() * height, Math.random() * width, Math.random() * height) ctx.stroke() // ctx.fill() } }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/examples/sparkleDots.html","permalink":"https://domsgit.github.io/CVS/examples/sparkleDots.html","excerpt":"","text":"闪点 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 new CVS({ onRender: function(i, caches) { const {ctx, options, width, height} = this // const {caches: {sparkleDots: caches}} = options let vdot = caches && caches[i] if(!vdot) { const size = Math.floor(Math.random() * 40) vdot = new this.VDot( new this.Dot( (width - size) * Math.random(), (height - size) * Math.random() ), new this.LineWidth( size, Math.random() * Math.pow(-1, Math.random() > 0.5 ? 2 : 1) ), this.randomHexColor() ) } vdot.render(this) return vdot }, times: 50, isAnimation: true, cacheName: 'sparkleDots' })"},{"title":"","date":"2019-09-03T16:15:05.000Z","updated":"2019-09-03T16:15:05.000Z","comments":true,"path":"CVS/src/index.js","permalink":"https://domsgit.github.io/CVS/src/index.js","excerpt":"","text":"+function() { var log = console.log function CVS(options) { this.defaultOptions = { el: '#canvas', width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, VDotLineWidth: 6, VDotColor: '#ffffff', caches: {} } this.options = this.shallowMerge(this.defaultOptions, options) || {} CVS.prototype.defaultOptions = this.defaultOptions this.width = this.options.width this.height = this.options.height this.dom = null this.ctx = null this.init() } var _proto = CVS.prototype // ======================================== public function ======================================== var type = _proto.type = function(target) { return Object.prototype.toString.call(target).slice(8, -1).toLowerCase() } var isObject = _proto.isObject = function(target) { return this.type(target) === 'object' } var isFn = _proto.isFn = function(target) { return typeof target === 'function' } var isArrayLike = _proto.isArrayLike = function(target) { var sType = type(target) if(sType === 'array' || sType === 'arguments') { return true } return false } var shallowMerge = _proto.shallowMerge = function(obj1, obj2) { if(!obj1) { return obj2 } if(!obj2) { return obj1 } if(typeof obj1 !== 'object' || typeof obj2 !== 'object') { return } // Object.assign polyfill // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign if (typeof Object.assign != 'function') { // Must be writable: true, enumerable: false, configurable: true Object.defineProperty(Object, \"assign\", { value: function assign(target, varArgs) { // .length of function is 2 'use strict'; if (target == null) { // TypeError if undefined or null throw new TypeError('Cannot convert undefined or null to object'); } let to = Object(target); for (var index = 1; index < arguments.length; index++) { var nextSource = arguments[index]; if (nextSource != null) { // Skip over if undefined or null for (let nextKey in nextSource) { // Avoid bugs when hasOwnProperty is shadowed if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) { to[nextKey] = nextSource[nextKey]; } } } } return to; }, writable: true, configurable: true }); } return Object.assign(obj1, obj2) } var randomHexColor = _proto.randomHexColor = function() { return '#' + (~~(Math.random() * (1"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/test/circlesRelation.html","permalink":"https://domsgit.github.io/CVS/test/circlesRelation.html","excerpt":"","text":"圆的关系 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 main() function main() { var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options var width = options.width var height = options.height var log = console.log var circles = { circle1: { x: 200, y: 200, r: 200 }, circle2: { x: 200, y: 200, r: 50 }, circle3: { x: 100, y: 100, r: 200 - 100 * Math.sqrt(2) }, circle4: { x: 200, y: 50, r: 50 }, circle5: { x: 400, y: 400, r: 200 * (Math.sqrt(2) - 1) }, circle6: { x: 400, y: 400, r: 200 } } var fillStyles = ['red', 'green', 'blue', 'orange', 'white', 'yellow'] // ctx.lineWidth = 100 不会考虑lineWidth ctx.globalAlpha = 0.5 for(var i = 0; i < fillStyles.length; i++) { var circle = circles['circle' + (i + 1)] ctx.fillStyle = fillStyles[i] ctx.beginPath() ctx.arc(circle.x, circle.y, circle.r, 0, 2 * Math.PI) ctx.stroke() ctx.fill() } // 同一个圆 cvs.assert(cvs.isCirclesSome(circles.circle1, circles.circle1), true) cvs.assert(cvs.isCirclesSome(circles.circle2, circles.circle2), true) cvs.assert(cvs.isCirclesSome(circles.circle1, circles.circle2), false) // 同心圆 cvs.assert(cvs.isCirclesInSomeCentrePoint(circles.circle1, circles.circle2), true) cvs.assert(cvs.isCirclesInSomeCentrePoint(circles.circle5, circles.circle6), true) cvs.assert(cvs.isCirclesInSomeCentrePoint(circles.circle1, circles.circle1), false) cvs.assert(cvs.isCirclesInSomeCentrePoint(circles.circle1, circles.circle3), false) // 相离 cvs.assert(cvs.isCirclesInDisjoint(circles.circle2, circles.circle3), true) cvs.assert(cvs.isCirclesInDisjoint(circles.circle2, circles.circle4), true) cvs.assert(cvs.isCirclesInDisjoint(circles.circle1, circles.circle3), false) // 外切 cvs.assert(cvs.isCirclesInOuterTangency(circles.circle1, circles.circle5), true) cvs.assert(cvs.isCirclesInOuterTangency(circles.circle1, circles.circle3), false) // 内切 cvs.assert(cvs.isCirclesInInnerTangency(circles.circle1, circles.circle3), true) cvs.assert(cvs.isCirclesInInnerTangency(circles.circle1, circles.circle4), true) cvs.assert(cvs.isCirclesInInnerTangency(circles.circle1, circles.circle2), false) // 包含 cvs.assert(cvs.isCirclesInContain(circles.circle1, circles.circle2)) cvs.assert(cvs.isCirclesInContain(circles.circle5, circles.circle6)) cvs.assert(cvs.isCirclesInContain(circles.circle1, circles.circle1), false) // 相交 cvs.assert(cvs.isCirclesInIntersect(circles.circle1, circles.circle6)) cvs.assert(cvs.isCirclesInIntersect(circles.circle1, circles.circle3), false) }"},{"title":"","date":"2019-09-03T14:45:37.000Z","updated":"2019-09-03T14:45:37.000Z","comments":true,"path":"CVS/test/isLineIntersect.test.html","permalink":"https://domsgit.github.io/CVS/test/isLineIntersect.test.html","excerpt":"","text":"基本骨架 html, body { margin: 0; padding: 0; height: 100%; overflow: hidden; } #canvas { display: block; box-sizing: border-box; background-color: #000; } 你的浏览器不支持 canvas，请升级你的浏览器。 var log = console.log var cvs = new CVS() var ctx = cvs.ctx var options = cvs.options ctx.beginPath() ctx.lineWidth = 6 ctx.strokeStyle = cvs.randomHexColor() ctx.moveTo(100, 100) ctx.lineTo(200, 200) ctx.stroke() ctx.beginPath() ctx.lineWidth = 6 ctx.strokeStyle = cvs.randomHexColor() ctx.moveTo(100, 200) ctx.lineTo(200, 100) ctx.stroke() ctx.beginPath() ctx.lineWidth = 6 ctx.strokeStyle = cvs.randomHexColor() ctx.moveTo(100, 100) ctx.lineTo(400, 200) ctx.stroke() log(cvs.isLineIntersect([100, 100, 200, 200], [100, 200, 200, 100])) // [50, 100] var points = cvs.isLineIntersect([100, 100, 200, 200], [100, 100, 400, 200]) log(points) // [50, 100] log(cvs.isSimilar(points[0], points[1])) // true"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2019-08-17T12:46:08.000Z","updated":"2019-08-17T12:46:08.000Z","comments":true,"path":"2019/08/17/hello-world/","link":"","permalink":"https://domsgit.github.io/2019/08/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}